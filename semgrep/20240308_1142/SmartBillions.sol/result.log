METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 36 Code Findings │
└──────────────────┘
                          
    /sb/SmartBillions.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
          681┆ for(;n<hashes.length;n++){ // make sure to burn gas
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
          379┆ walletBalance += keepbalance;
            ⋮┆----------------------------------------
          410┆ investBalance += investing;
            ⋮┆----------------------------------------
          413┆ walletBalance += investing / 10;
            ⋮┆----------------------------------------
          416┆ walletBalance += (investing * 5 / 100) * 2;
            ⋮┆----------------------------------------
          474┆ walletBalance += balance;
            ⋮┆----------------------------------------
          639┆ dividends[dividendPeriod] += msg.value / 20; // 5% dividend
            ⋮┆----------------------------------------
          643┆ walletBalance += fee;
            ⋮┆----------------------------------------
          656┆ hashBetSum += msg.value;
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
          139┆ uint public walletBalance = 0; // sum of funds in wallets
            ⋮┆----------------------------------------
          143┆ uint public investBalance = 0; // funding from investors
            ⋮┆----------------------------------------
          149┆ uint public maxWin = 0; // maximum prize won
            ⋮┆----------------------------------------
          150┆ uint public hashFirst = 0; // start time of building hashes      
  database                                                                      
            ⋮┆----------------------------------------
          151┆ uint public hashLast = 0; // last saved block of hashes
            ⋮┆----------------------------------------
          152┆ uint public hashNext = 0; // next available bet block.number
            ⋮┆----------------------------------------
          153┆ uint public hashBetSum = 0; // used bet volume of next block
            ⋮┆----------------------------------------
          160┆ uint public coldStoreLast = 0 ; // block of last cold store      
  transfer                                                                      
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
          470┆ for(;last<dividendPeriod;last++) {
            ⋮┆----------------------------------------
          471┆ balance += share * dividends[last];
            ⋮┆----------------------------------------
          681┆ for(;n<hashes.length;n++){ // make sure to burn gas
            ⋮┆----------------------------------------
          682┆ hashes[n] = 1;
            ⋮┆----------------------------------------
       solidity.performance.use-multiple-require                                
          Using multiple require statements is cheaper than using && multiple   
  check combinations.                                                           
          There are more advantages, such as easier to read code and better     
  coverage reports.                                                             
                                                                                
          290┆ require(investStart == 1 && hashFirst > 0 && block.number <      
  _when);                                                                       
            ⋮┆----------------------------------------
          318┆ require(_amount > 0 && this.balance >= (investBalance * 9 / 10) +
  walletBalance + _amount);                                                     
            ⋮┆----------------------------------------
          320┆ require((_amount <= this.balance / 400) && coldStoreLast + 4 * 60
  * 24 * 7 <= block.number);                                                    
            ⋮┆----------------------------------------
          401┆ require(investStart > 1 && block.number < investStart +          
  (hashesSize * 5) && investBalance < investBalanceMax);                        
            ⋮┆----------------------------------------
          636┆ require(msg.value <= 1 ether && msg.value < hashBetMax);
            ⋮┆----------------------------------------
          673┆ require(hashFirst == 0 && _sadd > 0 && _sadd <= hashesSize);
            ⋮┆----------------------------------------
       solidity.performance.use-nested-if                                       
          Using nested is cheaper than using && multiple check combinations.    
  There are more                                                                
          advantages, such as easier to read code and better coverage reports.  
                                                                                
          339┆         if(investStart > 1 && block.number >= investStart +      
  (hashesSize * 5)){ // ca. 14 days                                             
          340┆             investStart = 0; // start dividend payments
          341┆         }
          342┆         else {
          343┆             if(hashFirst > 0){
          344┆                    uint period = (block.number - hashFirst) / (10
  * hashesSize );                                                               
          345┆                 if(period > dividends.length - 2) {
          346┆                     dividends.push(0);
          347┆                 }
          348┆                 if(period > dividendPeriod && investStart == 0 &&
  dividendPeriod < dividends.length - 1) {                                      
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
          348┆ if(period > dividendPeriod && investStart == 0 && dividendPeriod 
  < dividends.length - 1) {                                                     
          349┆     dividendPeriod++;
          350┆ }
            ⋮┆----------------------------------------
          361┆ if(wallets[msg.sender].balance > 0 &&                            
  wallets[msg.sender].nextWithdrawBlock <= block.number){                       
          362┆     uint balance = wallets[msg.sender].balance;
          363┆     wallets[msg.sender].balance = 0;
          364┆     walletBalance -= balance;
          365┆     pay(balance);
          366┆ }
            ⋮┆----------------------------------------
          609┆ if(investStart == 0 && balances[msg.sender]>0){
          610┆     commitDividend(msg.sender);}
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
          349┆ dividendPeriod++;
            ⋮┆----------------------------------------
          470┆ for(;last<dividendPeriod;last++) {
            ⋮┆----------------------------------------
          652┆ hashNext++;
            ⋮┆----------------------------------------
          681┆ for(;n<hashes.length;n++){ // make sure to burn gas
            ⋮┆----------------------------------------
          764┆ for(;n<_num;n++){

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 36 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
