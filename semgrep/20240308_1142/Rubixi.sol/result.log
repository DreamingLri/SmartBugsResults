METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 18 Code Findings │
└──────────────────┘
                   
    /sb/Rubixi.sol 
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
           47┆ collectedFees += msg.value;
            ⋮┆----------------------------------------
           68┆ balance += (msg.value * (100 - _fee)) / 100;
            ⋮┆----------------------------------------
           69┆ collectedFees += (msg.value * _fee) / 100;
            ⋮┆----------------------------------------
           77┆ payoutOrder += 1;
            ⋮┆----------------------------------------
       solidity.performance.init-variables-with-default-value                   
          Uninitialized variables are assigned with the types default value.    
  Explicitly initializing a                                                     
          variable with its default value costs unnecessary gas.                
                                                                                
           13┆ uint private balance = 0;
            ⋮┆----------------------------------------
           14┆ uint private collectedFees = 0;
            ⋮┆----------------------------------------
           17┆ uint private payoutOrder = 0;
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
           72┆ while (balance > participants[payoutOrder].payout) {
            ⋮┆----------------------------------------
           72┆ while (balance > participants[payoutOrder].payout) {
            ⋮┆----------------------------------------
           72┆ while (balance > participants[payoutOrder].payout) {
            ⋮┆----------------------------------------
           73┆ uint payoutToSend = participants[payoutOrder].payout;
            ⋮┆----------------------------------------
           73┆ uint payoutToSend = participants[payoutOrder].payout;
            ⋮┆----------------------------------------
           74┆ participants[payoutOrder].etherAddress.send(payoutToSend);
            ⋮┆----------------------------------------
           74┆ participants[payoutOrder].etherAddress.send(payoutToSend);
            ⋮┆----------------------------------------
           76┆ balance -= participants[payoutOrder].payout;
            ⋮┆----------------------------------------
           76┆ balance -= participants[payoutOrder].payout;
            ⋮┆----------------------------------------
           76┆ balance -= participants[payoutOrder].payout;
            ⋮┆----------------------------------------
           77┆ payoutOrder += 1;

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 18 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
