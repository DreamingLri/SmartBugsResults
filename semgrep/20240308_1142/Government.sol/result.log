METRICS: Using configs from the Registry (like --config=p/ci) reports pseudonymous rule metrics to semgrep.dev.
To disable Registry rule metrics, use "--metrics=off".
Using configs only from local files (like --config=xyz.yml) does not enable metrics.

More information: https://semgrep.dev/docs/metrics

               
               
┌─────────────┐
│ Scan Status │
└─────────────┘
  Scanning 1 file tracked by git with 48 Code rules:
  Scanning 1 file with 48 solidity rules.
                    
                    
┌──────────────────┐
│ 14 Code Findings │
└──────────────────┘
                       
    /sb/Government.sol 
       solidity.performance.array-length-outside-loop                           
          Caching the array length outside a loop saves reading it on each      
  iteration, as long as the                                                     
          array's length is not changed during the loop.                        
                                                                                
           94┆ for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){
            ⋮┆----------------------------------------
       solidity.performance.inefficient-state-variable-increment             
          <x> += <y> costs more gas than <x> = <x> + <y> for state variables.
                                                                             
           49┆ round += 1;
            ⋮┆----------------------------------------
           65┆ profitFromCrash += amount * 5/100;
            ⋮┆----------------------------------------
           77┆ lastCreditorPayedOut += 1;
            ⋮┆----------------------------------------
          107┆ profitFromCrash += msg.value;
            ⋮┆----------------------------------------
       solidity.performance.state-variable-read-in-a-loop                       
          Replace state variable reads and writes within loops with local       
  variable reads and writes.                                                    
                                                                                
           94┆ for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){
            ⋮┆----------------------------------------
           94┆ for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){
            ⋮┆----------------------------------------
           95┆ debt += creditorAmounts[i];
            ⋮┆----------------------------------------
          100┆ for(uint i=0; i<lastCreditorPayedOut; i++){
            ⋮┆----------------------------------------
          101┆ payout += creditorAmounts[i];
            ⋮┆----------------------------------------
       solidity.performance.unnecessary-checked-arithmetic-in-loop              
          A lot of times there is no risk that the loop counter can overflow.   
  Using Solidity's                                                              
          unchecked block saves the overflow checks.                            
                                                                                
           94┆ for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){
            ⋮┆----------------------------------------
          100┆ for(uint i=0; i<lastCreditorPayedOut; i++){
            ⋮┆----------------------------------------
       solidity.performance.use-prefix-increment-not-postfix                    
          Consider using the prefix increment expression whenever the return    
  value is not needed. The                                                      
          prefix increment expression is cheaper in terms of gas.               
                                                                                
           94┆ for(uint i=lastCreditorPayedOut; i<creditorAmounts.length; i++){
            ⋮┆----------------------------------------
          100┆ for(uint i=0; i<lastCreditorPayedOut; i++){

                
                
┌──────────────┐
│ Scan Summary │
└──────────────┘

Ran 48 rules on 1 file: 14 findings.

A new version of Semgrep is available. See https://semgrep.dev/docs/upgrading

Versions prior to 1.43.0 will cease to work with Semgrep.dev after March 11th 2024, please upgrade.
